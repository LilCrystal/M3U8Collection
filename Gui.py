# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Gui.py'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import threading

from PyQt5 import QtCore, QtGui, QtWidgets

import DownloadThread
import Reptile


class Ui_MainWindow(object):
    link = ""
    storage_path = "F:/SYS-ACDE/Http/"
    switch = False

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(657, 315)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(130, 50, 401, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(130, 120, 401, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(60, 50, 61, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 120, 81, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(130, 160, 331, 41))
        self.label_3.setObjectName("label_3")
        self.button_1 = QtWidgets.QPushButton(self.centralwidget)
        self.button_1.setGeometry(QtCore.QRect(130, 210, 120, 41))
        self.button_1.setObjectName("button_1")
        self.button_2 = QtWidgets.QPushButton(self.centralwidget)
        self.button_2.setGeometry(QtCore.QRect(270, 210, 120, 41))
        self.button_2.setObjectName("button_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 657, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "M3U8链接"))
        self.label_2.setText(_translate("MainWindow", "文件存放位置"))
        self.label_3.setText(_translate("MainWindow", "例：D:/test/"))
        self.button_1.setText(_translate("MainWindow", "确定"))
        self.button_1.clicked.connect(self.click_button_1)
        self.button_2.setText(_translate("MainWindow", "OH!!!!"))
        self.button_2.clicked.connect(self.click_button_2)

    def click_button_2(self):
        print("Click button_2")
        self.link = self.lineEdit.text()
        if len(self.lineEdit_2.text()) > 0:
            self.storage_path = self.lineEdit_2.text()
        # 下面这个函数直接传参数就开始运行了，因此目标函数和参数应该分开传，再用start才能分离线程
        # thread = threading.Thread(target=Reptile.start_reptile(self.link, self.storage_path))
        thread = threading.Thread(target=Reptile.start_reptile, args=(self.link, self.storage_path))
        thread.setDaemon(True)
        thread.start()

    def click_button_1(self):
        print("Click button_1")
        link_tmp = self.lineEdit.text()
        if len(link_tmp) > 0 and link_tmp.endswith("m3u8"):
            self.link = link_tmp
        else:
            print("The link is not applicable")
        storage_path_tmp = self.lineEdit_2.text()
        if len(storage_path_tmp) > 0:
            self.storage_path = storage_path_tmp
        else:
            print("The link is not applicable, will use default path")
        print("The link is " + self.link)
        print("The storage path is " + self.storage_path)
        threading.Thread(target=DownloadThread.download(self.link, self.storage_path))


